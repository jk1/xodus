plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'io.codearte.nexus-staging' version '0.11.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id 'org.jetbrains.dokka' version '0.9.17'
}

group = 'org.jetbrains.xodus'
version = hasProperty('xodusVersion') ? project.xodusVersion : ''
def isSnapshot = version.endsWith('SNAPSHOT')
def isDailyBuild = hasProperty('dailyBuild') ? project.dailyBuild : false
def mavenPublishUrl = hasProperty('mavenPublishUrl') ? project.mavenPublishUrl : ''
def mavenPublishUsername = hasProperty('mavenPublishUsername') ? project.mavenPublishUsername : ''
def mavenPublishPassword = hasProperty('mavenPublishPassword') ? project.mavenPublishPassword : ''
def signingKeyId = hasProperty('signingKeyId') ? project.signingKeyId : ''
def signingPassword = hasProperty('signingPassword') ? project.signingPassword : ''
def signingSecretKeyRingFile = hasProperty('signingSecretKeyRingFile') ? project.signingSecretKeyRingFile : '../key.gpg'

static def shouldDeploy(project) {
    return project.version.length() > 0 && !(project.name in ['benchmarks', 'samples'])
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5.1'
}

defaultTasks 'assemble'

// Use nexus-staging-plugin to workaround https://issues.sonatype.org/browse/OSSRH-5454
nexusStaging {
    username = mavenPublishUsername
    password = mavenPublishPassword
    delayBetweenRetriesInMillis = 30000
    stagingProfileId = "89ee7caa6631c4"
}

subprojects {
    apply plugin: 'license'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.dokka'

    sourceCompatibility = 1.7
    compileJava.options.encoding = 'UTF-8'
    group = rootProject.group
    version = rootProject.version
    archivesBaseName = rootProject.name + '-' + project.name

    license {
        header rootProject.file('license/copyright.ftl')
        strictCheck true
        ext.inceptionYear = 2010
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.owner = 'JetBrains s.r.o.'
        include "**/*.kt"
        include "**/*.java"
        mapping {
            kt = 'JAVADOC_STYLE'
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    }

    // tests for most of sub-projects run with database encryption turned on
    if (!(project.name in ['benchmarks', 'compress', 'crypto', 'openAPI', 'samples', 'utils'])) {
        test {
            systemProperty 'exodus.cipherId', 'jetbrains.exodus.crypto.streamciphers.ChaChaStreamCipherProvider'
            systemProperty 'exodus.cipherKey', '000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f'
            systemProperty 'exodus.cipherBasicIV', '314159262718281828'
            // uncomment the following line to run tests in-memory
            //systemProperty 'exodus.log.readerWriterProvider', 'jetbrains.exodus.io.inMemory.MemoryDataReaderWriterProvider'
        }
        dependencies {
            testCompile project(':crypto')
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName, 'Implementation-Version': version
        }
    }

    test {
        minHeapSize = '1g'
        maxHeapSize = '1g'
        //jvmArgs = ['-ea', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=2808']
        //testLogging.showStandardStreams = true
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        duplicatesStrategy 'exclude'
        includeEmptyDirs false
        from javadoc.destinationDir
    }
    javadoc.failOnError = false
    // work around for Java 8 javadoc which is too strict
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        duplicatesStrategy 'exclude'
        includeEmptyDirs false
        from project.sourceSets.main.java
        from project.sourceSets.main.kotlin
    }

    // configuring projects with Kotlin sources
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:1.3.10"
        compile 'io.github.microutils:kotlin-logging:1.5.4'
    }
    compileKotlin {
        kotlinOptions {
            languageVersion = '1.2'
            apiVersion = '1.2'
        }
    }
    compileTestKotlin {
        kotlinOptions {
            languageVersion = '1.2'
            apiVersion = '1.2'
        }
    }
    if (project.name != "benchmarks") {
        dokka {
            jdkVersion = 7
            packageOptions {
                reportUndocumented = false
            }
        }
        task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
        }
        javadocJar {
            dependsOn dokkaJavadoc
            from dokkaJavadoc.outputDirectory
        }
    }

    artifacts {
        archives jar, javadocJar, sourceJar
    }

    if (!isSnapshot && signingKeyId.length() > 0) {
        ext.'signing.keyId' = signingKeyId
        ext.'signing.password' = signingPassword
        ext.'signing.secretKeyRingFile' = signingSecretKeyRingFile
    }

    afterEvaluate { project ->
        if (shouldDeploy(project)) {
            uploadArchives {
                repositories {
                    mavenDeployer {

                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                        if (isDailyBuild) {
                            repository(url: "https://api.bintray.com/maven/jetbrains/xodus/" + archivesBaseName + "/;publish=1") {
                                authentication(userName: mavenPublishUsername, password: mavenPublishPassword)
                            }
                        } else {
                            repository(url: mavenPublishUrl) {
                                authentication(userName: mavenPublishUsername, password: mavenPublishPassword)
                            }
                        }

                        pom.project {
                            name 'Xodus'
                            description 'Xodus is pure Java transactional schema-less embedded database'
                            packaging 'jar'
                            url 'https://github.com/JetBrains/xodus'

                            scm {
                                url 'https://github.com/JetBrains/xodus'
                                connection 'scm:git:https://github.com/JetBrains/xodus.git'
                                developerConnection 'scm:git:https://github.com/JetBrains/xodus.git'
                            }

                            licenses {
                                license {
                                    name 'The Apache Software License, Version 2.0'
                                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'JetBrains'
                                    name 'JetBrains Team'
                                    organization 'JetBrains s.r.o'
                                    organizationUrl 'http://www.jetbrains.com'
                                }
                            }
                        }
                    }
                }
            }
            signing {
                required { !isSnapshot && signingKeyId.length() > 0 && gradle.taskGraph.hasTask('uploadArchives') }
                sign configurations.archives
            }
        }
    }
}
